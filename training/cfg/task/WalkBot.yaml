# used to create the object
name: WalkBot

physics_engine: ${..physics_engine}

# if given, will override the device setting in gym. 
env:
  numEnvs: ${resolve_default:4096,${...num_envs}}
  envSpacing: 1.0
  maxEpisodeLength: 500

  clipObservations: 5.0
  clipActions: 1.0

  goalDist: 4.0
  goalThreshold: 0.2

  asset:
    assetRoot: "../../assets"
    assetFileName: "urdf/WalkBot/urdf/WalkBot.urdf"

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

  baseInitState:
    pos: [0.0, 0.0, .25] # x,y,z [m]
    rot: [0.0, 0.0, 0.0, 1.0] # x,y,z,w [quat]
    vLinear: [0.0, 0.0, 0.0]  # x,y,z [m/s]
    vAngular: [0.0, 0.0, 0.0]  # x,y,z [rad/s]

  actuatorParams:
    driveMode: 1          #0 for Torque Control, 1 for Pos Control. This multiplies to stiffness and damping (Both should be 0 for torque control)
    stiffness: 1000.0     #Controller looks like torque=posError*stiffness + velError*damping
    damping: 10.0
    maxPosition: 1.5708   # +/- 90 deg (this value is set in radians)
    maxSpeed: 38          #M228 = 10.89, M077=38
    maxTorque: 0.22       #M228 = 0.52, M077=0.22
    friction: 0.0
    torqueDecay: 4   #This controls how the avaliable torque falls off as a DOF_Vel approachs maxSpeed
  
  assetParams:
    angularDamping: 0.0
    angularVelocity: 10000.0

  plane:
    staticFriction: 0.6
    dynamicFriction: 0.5
    restitution: 0.0
  
  # reward parameters
  headingWeight: 0.5
  upWeight: 0.1

  # cost parameters
  dofVelocityScale: 0.2
  deathCost: -2.0
  terminationHeight: 0.13

sim:
  dt: 0.0166 # 1/60 s
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 1
    contact_offset: 0.02
    rest_offset: 0.001
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 100.0
    default_buffer_size_multiplier: 2.0
    max_gpu_contact_pairs: 1048576 # 1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 0 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)

task:
  randomize: False
